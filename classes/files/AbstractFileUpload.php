<?php

abstract class AbstractFileUpload {//abstract files class, defines the complete structures of all kinds of files

    private $filesize;
    protected static $Max_Size = 2048;
    protected $fieldname;
    protected $original_file_name;
    protected $new_file_name;
    protected $file_type;
    protected $error;
    private $aErrormessage;
    protected $upload_dir;
    protected $success;

    /**
     * Sets all the fields required for a file to be uploaded to the desired directory. Manages the errors that occur
     * while uploading the specified file
     */
    public function __construct() {
        $this->error = true;
        $this->fieldname = NULL;
        $this->file_type = NULL;
        $this->filesize = 0;
        $this->upload_dir = NULL;
        $this->original_file_name = NULL;
        $this->new_file_name = NULL;
        $this->success = "";
        self::$Max_Size = 2048;
        $this->aErrormessage = array();
    }

    /**
     * Sets the field name where file will be uploaded from
     * @param string $name name of the field where file will be uploaded from
     */
    public function setFieldname($name) {
        $this->fieldname = $name;
    }

    /**
     * Sets the directory where files will be uploaded
     * @param type $dirname name of the directory where file will be uploaded
     */
    public function setUploadDir($dirname) {
        if (is_dir($dirname)) {
            $this->upload_dir = $dirname;
            $foward_slash_position = strlen($this->upload_dir) - 1;
            if ($this->upload_dir[$foward_slash_position] != '/') {
                $this->upload_dir .= '/';
            }
        } else {
            $this->upload_dir = dirname(__FILE__) . "/";
            $this->seterror("The directory you specified was not found, as a result file was saved in " . $this->upload_dir . ".<br/>");
        }
    }

    /**
     * Checks and sets file type for the file uploaded based on its extension
     */
    public function setType() {
        $this->setOriginalName();
        $i = strrpos($this->original_file_name, ".");
        if (!$i) {
            $this->file_type = NULL;
        } else {
            $l = strlen($this->original_file_name) - $i;
            $this->file_type = substr($this->original_file_name, $i + 1, $l);
        }

        $this->file_type = strtolower($this->file_type);
    }

    /**
     * Reads and sets the size of the file uploaded
     */
    public function setFilesize() {
        $this->filesize = filesize($_FILES[$this->fieldname]['tmp_name']);
    }

    /**
     * Reads sets the original name of the file
     */
    public function setOriginalName() {
        $this->original_file_name = stripslashes($_FILES[$this->fieldname]["name"]);
    }

    /**
     * Creates a new name for the uploaded file using randomly generated number, current time, company name and file
     */
    public function setNewname() {
        $this->new_file_name = "twissevents-" . mt_rand(100, 5000000) . "-" . md5(time()) . "." . $this->getType();
    }

    /**
     * Moves the uploaded file in to the directory specified
     */
    public function uploadFile() {
        if (isset($_FILES[$this->fieldname]['name'])) {
            $this->setOriginalName();
            $this->setType();
            $this->setNewname();
            $this->setFilesize();
            $this->validateSize();

            if (!$this->error) {
                $this->validateType();
            }
            if (!$this->error) {
                $file = $this->upload_dir . $this->new_file_name;
                $copied = move_uploaded_file($_FILES[$this->fieldname]["tmp_name"], $file);
                if ($copied) {
                    $this->success .= '<span class="success">' . $this->original_file_name . ' (' . $this->getStringfilesize() . ') uploaded successfully.</span>';
                } else {
                    $this->seterror("Could not upload $this->original_file_name because: " . error_get_last());
                }
            } else {
                $this->error = true;
            }
        } else {
            $this->error = true;
            $this->seterror("Field specified was not found on your form");
        }
    }

    /**
     * Returns the directory where files are to be uploaded
     * @return string
     */
    public function getUploadDir() {
        return $this->upload_dir;
    }

    /**
     * Returns file type, e.g. .jpg, .png, .pdf, etc.
     * @return string
     */
    public function getType() {
        return $this->file_type;
    }

    /**
     * Returns original filename
     * @return string
     */
    public function getOriginalname() {
        return $this->original_file_name;
    }

    /**
     * Returns new filename generated by setNewName function
     * @return string
     */
    public function getNewname() {
        return $this->new_file_name;
    }

    /**
     * Returns current file's size
     * @return int
     */
    public function getFilesize() {
        return $this->filesize;
    }

    /**
     * Appends "KB"/"MB" to file size depending on whether that file size is megabytes or kilobytes
     * @return string
     */
    public function getStringfilesize() {
        $size = number_format(($this->filesize / 1024), 1, '.', '');
        if ($size > 1024) {
            $size = ($size / 1024);
            $size = number_format($size, 1, '.', '') . "MB";
        } else {
            $size = $size . "KB";
        }
        return $size;
    }

    /**
     * Adds the error specified in parameters to the errors array
     * @param size $sError
     */
    protected function seterror($sError) {
        $this->aErrormessage[] = "<li>$sError</li>\n";
    }

    /**
     * Returns true if an error occured while uploading a file and false otherwise
     * @return boolean
     */
    public function getError() {
        return $this->error;
    }

    /**
     * Returns an unordered list of the errors that occured in the system
     * @return string
     */
    public function getErrorMessages() {
        $sError = "<ul>";
        $sError .= implode("\n", $this->aErrormessage);
        $sError .= "</ul>";
        return $sError;
    }

    public function getSuccess() {
        return $this->success;
    }

    /**
     * Validates the filetype of the file uploaded by user
     */
    public abstract function validateType();

    /**
     * Validates whether the size of the uploaded file is less or equal to the Max file size allowed
     */
    public abstract function validateSize();

    /**
     * Resizes image and uploads it to the directory specified
     * @param string $NewDir directory where resized image will be uploaded
     * @param int $MaxWidth Maximum width to limit image to when resizing
     * @param int $MaxHeight Maximum height to limit image to when resizing
     */
    public function resize($NewDir, $MaxWidth, $MaxHeight) {

    }

}
